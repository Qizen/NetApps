function CallCrawl(){
  $.ajax({
    url: '@{CrawlR}',
    type: 'POST',
    contentType: "application/json",
    data: "",
    success: function(){
      console.log("success")
    },
    error: function(){
      console.log("error")
    },
  });
}
      
function GetRes(){
    var qry = document.getElementById("f1")[0].value;
    console.log(qry);
    $.ajax({
    url: "http://localhost:7474/db/data/transaction/commit",
    type: 'POST',
    contentType: "application/json",
    dataType: 'json',
    crossDomain:true,
    data: JSON.stringify({
      "statements":[{"statement":qry,
                     "resultDataContents":["graph"]
		   }]
    }),
    success: function(res){
      d3.select("body").append("p").text("Javascript scopes are stupid");
      OnDbRecv(res);
    },
    error: function(res){
      console.log("error");
      return res;
    },
    beforeSend: function (xhr) {
      xhr.setRequestHeader ("Authorization", "Basic " + btoa("neo4j" + ":" + "password"));
    },
  });
}

function ShowRes(){
  GetRes();
}

function idIndex(a,id) {
  for (var i=0;i<a.length;i++) {
    if (a[i].id == id) return i;}
  return null;
}

function OnDbRecv(res){
  console.log(res);

  // Convert everything to nodes and links like d3 wants
  var nodes=[], links=[];
 
  res.results[0].data.forEach(function (row) {
  row.graph.nodes.forEach(function (n) {
    if (idIndex(nodes,n.id) == null)
      nodes.push({id:n.id,label:n.labels[0],title:n.properties.name});
    });
    links = links.concat( row.graph.relationships.map(function(r) {
      return {source:r.startNode,target:r.endNode,type:r.type};
    }));
  });
  viz = {nodes:nodes, links:links};
  // force layout setup

  var svg = d3.select("svg"),
    width = +svg.attr("width"),
    height = +svg.attr("height");

  svg.selectAll("*").remove();
  
  var color = d3.scaleOrdinal(d3.schemeCategory20);

  var simulation = d3.forceSimulation()
    .force("link", d3.forceLink().id(function(d) { return d.id; }))
    .force("charge", d3.forceManyBody())
    .force("center", d3.forceCenter(width / 2, height / 2));

  var link = svg.append("g")
      .attr("class", "links")
    .selectAll("line")
    .data(viz.links)
    .enter().append("line")
      .attr("stroke-width", function(d) { return /*Math.sqrt(d.value)*/ 1; });

  var node = svg.append("g")
      .attr("class", "nodes")
    .selectAll("circle")
    .data(viz.nodes)
    .enter().append("circle")
      .attr("r", 5)
      .attr("fill", function(d) { return color(d.label); })
      .call(d3.drag()
          .on("start", dragstarted)
          .on("drag", dragged)
          .on("end", dragended));

  node.append("title")
      .text(function(d) { return d.title; });

  simulation
      .nodes(viz.nodes)
      .on("tick", ticked);

  simulation.force("link")
      .links(viz.links);

  function ticked() {
    link
          .attr("x1", function(d) { return d.source.x; })
          .attr("y1", function(d) { return d.source.y; })
          .attr("x2", function(d) { return d.target.x; })
          .attr("y2", function(d) { return d.target.y; });

    node
        .attr("cx", function(d) { return d.x; })
        .attr("cy", function(d) { return d.y; });
  }

  function dragstarted(d) {
    if (!d3.event.active) simulation.alphaTarget(0.3).restart();
      d.fx = d.x;
      d.fy = d.y;
  }

  function dragged(d) {
    d.fx = d3.event.x;
    d.fy = d3.event.y;
  }

  function dragended(d) {
    if (!d3.event.active) simulation.alphaTarget(0);
    d.fx = null;
    d.fy = null;
  }

}
